<div class="tab-pane mt-3" id="entity-create" role="tabpanel" aria-labelledby="entity-create-tab">
    <div class="alert alert-warning show" role="alert">
        <strong><i class="bi bi-shield-shaded"></i>&nbsp;&nbsp;Criar entidade</strong>
        <small>: <i class="bi bi-key-fill"></i> [<strong>entity-create</strong>]</small>
    </div>
    <div class="flex-column">
        <form class="form-group">
            <entity-name id="tag-entity-name">
                <hr>
                <div id="alert-entity-name" class="alert alert-info show" role="alert">
                    <i class="bi bi-info-circle"></i>&nbsp;Nome: <strong>único</strong> no banco de dados; até 50
                    caracteres entre letras, números e _
                </div>
                <div class="input-field-entity mt-3 mb-1">
                    <div>
                        <label for="input-text-entity-name" class="label mb-1 text-secondary"><i
                                class="bi bi-box"></i>&nbsp;Entidade</label>
                        <!-- #issue: pesquisar no banco entidade com mesmo nome a partir do terceiro caracter digitado -->
                        <input type="text" minlength="3" maxlength="50" class="form-control is-invalid"
                            id="input-text-entity-name"
                            placeholder="Informe um nome único para a entidade e tecle Enter" autocomplete="off"
                            value="pessoa" />
                    </div>
                </div>
            </entity-name>
            <entity-namespace id="tag-entity-namespace">
                <hr>
                <div class="alert-container" id="entity-fields">
                    <div id="alert-entity-namespace" class="alert alert-info show" role="alert">
                        <i class="bi bi-info-circle"></i>&nbsp;Propriedades: id[entidade], crdate e isactive são
                        criados
                        em todas as tabelas por padrão
                    </div>
                </div>
                <div class="input-field-entity mt-3 mb-1">
                    <label for="input-textarea-entity-namespace" class="label mb-1 text-secondary"><i
                            class="bi bi-ui-radios"></i>&nbsp;Propriedades</label>
                    <textarea minlength="3" maxlength="500" class="form-control is-invalid" style="height: 5rem"
                        id="input-textarea-entity-namespace"
                        placeholder="Informe nomes únicos, separados por vírgulas, e tecle Enter"
                        autocomplete="off">nome, email, celular, senha</textarea>
                </div>
            </entity-namespace>
            <entity-fields id="tag-entity-fields">
                <hr>
                <ul class="nav nav-tabs" id="nav-" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="nav-form-tab" data-bs-toggle="tab"
                            data-bs-target="#nav-form" type="button" role="tab" aria-controls="nav-form"
                            aria-selected="true"><i class="bi bi-ui-radios"></i></button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="nav-code-json-tab" data-bs-toggle="tab"
                            data-bs-target="#nav-code-json" type="button" role="tab" aria-controls="nav-code-json"
                            aria-selected="false">{ }</button>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane show active" id="nav-form" role="tabpanel" aria-labelledby="nav-form-tab">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th class="text-left">Campo</th>
                                        <th class="text-center" style="width: 10rem">Privacidade&nbsp;<i
                                                class="bi bi-lock-fill"></i></th>
                                        <th class="text-center" style="width: 10rem">Tipo</th>
                                        <th class="text-center" style="width: 8rem">Tamanho</th>
                                        <th class="text-left" style="width: 2.5rem">null</th>
                                        <th class="text-left fw-bold" style="width: 2.5rem">
                                            hash
                                        </th>
                                        <th class="text-left fw-bold" style="width: 2.5rem">
                                            <i class="bi bi-search"></i>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody id="fields-settings"></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="tab-pane" id="nav-code-json" role="tabpanel" aria-labelledby="nav-code-json-tab">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th class="text-left">JSON</th>
                                    </tr>
                                </thead>
                                <tbody id="entity-json"></tbody>
                            </table>
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-outline-secondary" id="btn-entity-create-config"><i
                                class="bi bi-box"></i>&nbsp;&nbsp;Limpar</button>
                        <button class="btn btn-success" data-bs-toggle="offcanvas"
                            data-bs-target="#offcanvas-app-create-entity" aria-controls="offcanvas-app-create-entity"
                            id="btn-entity-create" disabled>Criar&nbsp;&nbsp;<i class="bi bi-box"></i></button>
                    </div>
                </div>
            </entity-fields>
        </form>
    </div>
</div>
<div class="offcanvas offcanvas-bottom text-ligth fw-bold bg-dark" tabindex="-1"
    id="offcanvas-app-create-entity" aria-labelledby="offcanvas-app-create-entityLabel">
    <div class="d-flex">
        <h5 class="offcanvas-title" id="offcanvas-app-create-entityLabel"><img src="favicon.svg"></h5>
        <div class="d-flex">
            <a href="#dock" data-bs-dismiss="offcanvas" aria-label="Close">
                <div class="btn-group dropdown">
                    <button type="button" class="btn btn-dark dropdown-toggle" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        <img src="favicon.svg" height="25rem;">
                    </button>
                </div>
            </a>
        </div>
    </div>
    <div class="offcanvas-body">
        <div class="container-fluid" >
            <card class="bg-dark text-info border-0"
                style="font-family: 'Courier New', Courier, monospace;">
aes.framework % /Users/Github/framework_<br>
workflow:<br>
try { mkdir ˜/back-end/model/index } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/index } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/[entity] } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/[entity]/backup } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/[entity]/cruds } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/[entity]/detail } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/[entity]/log } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/[entity]/sql } catch (err) { return err }<br>
call(feedback-client)<br>
try { mkdir ˜/back-end/model/entity/[entity]/teste } catch (err) { return err }<br>
<br>
mkdir return true
call(feedback-client)<br>
<br>
<br>
try { create-file ˜/back-end/model/index/[entity.json]; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa.sql; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try { create-file ˜/back-end/model/[entity]/cruds/createe.js } catch (err) { return err }<br>
call(feedback-client)<br>
try { create-file ˜/back-end/model/[entity]/cruds/delete.js; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try { create-file ˜/back-end/model/[entity]/cruds/read.js; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try { create-file ˜/back-end/model/[entity]/cruds/search.js; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try { create-file ˜/back-end/model/[entity]/cruds/update.js; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa-backup.sql; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa-delete-log.sql; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa-detail-delete-log.sql; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa-detail-update-log.sql; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa-detail.sql; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa-read-log.sql; next() } catch (err) { return err }<br>
call(feedback-client)<br>
try ( create-file ˜/back-end/model/entity/[entity]/sql/create-table-pessoa-update-log.sql; next() } catch (err) { return err }<br>
<br>
create-file return true
call(feedback-client)<br>
<br>
try { populate via api }
<br>
call(feedback-client)<br>
try populate via call
<br>
call(feedback-client)<br>
call(feedback-client)<br>
Build concluido com sucesso em []ms<br>
Clique na nova aba Entidades, encontre a entidade recém criada, abra-a, confira a documentação da api, os dados de teste, crie outras entidades.







</card>

        </div>
    </div>
</div>


<script src="assets/javascript/framework/tools/entity/create/form.js "></script>
<script src="assets/javascript/framework/tools/entity/entity.js "></script>
<script src="assets/javascript/framework/tools/entity/create/fields.js "></script>
<script src="assets/javascript/framework/tools/entity/create/pretty.js "></script>
<script src="assets/javascript/framework/tools/entity/create/observer.js "></script>